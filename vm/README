
# Some examples of 'vm' assembly


#--------------------------------------
# bds code:
#     a = 4
#--------------------------------------

pushi 4
load a
set


#--------------------------------------
# bds code:
#     a = 2 + 3
#--------------------------------------

pushi 2
pushi 3
addi
load a
set


#--------------------------------------
# bds code:
#     a[i] = b[j] + 7
#--------------------------------------

            # Stack
push 7
load j
load b      # b, j, 7
reflist     # b[j], 7
addi
load i      # i, b[j]+7
load a      # a, i, b[j]+7
reflist     # a[i], b[j]+7
set         # -


#--------------------------------------
# bds code:
#     a{'hi' + 1} = 'bye'
#--------------------------------------

            # Stack
pushs 'bye'
pushs 'hi'
pushi 1
adds        # 'hi1', 'bye'
load a      # a, 'hi1', 'bye'
refdict     # a{'hi1'}, 'bye'
set         # -

#--------------------------------------
# bds code:
#     z.a[7]{'hi'} = 42    
# where: z is an object
#--------------------------------------

pushi 42    # 42
pushs 'hi'  # 'hi', 42
pushi 7     # 7, 'hi', 42
pushs 'a'   # 'a', 7, 'hi', 42
load z      # z, 'a', 7, 'hi', 42
reffield    # z.a, 7, 'hi', 42
reflist     # z.a[7], 'hi', 42
refdict     # z.a[7]{'hi}, 42
set

#--------------------------------------
# bds code:
#     int f(int x) return x+1
#     z = f(7)
#--------------------------------------

f:
load x
push 1
addi       # x+1 is the return value
ret        # Return from function:
           #    - Remove scope (restore old scope)
           #    - pop PC from call-stack (jump to that position)

main:
pushi 7
call f     # Function call:
           #    - create new scope
           #    - add arguments as scope variables
           #    - push PC to call-stack
load z
set

